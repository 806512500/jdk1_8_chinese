/*
 * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

 package java.lang;

 /** CharacterData类封装了在Java.lang.Character中发现的大型表格。 */
 
 class CharacterData02 extends CharacterData {
     /* 字符属性目前以以下方式编码为32位：
         1位   镜像属性
         4位   方向性属性
         9位   用于大小写转换的带符号偏移量
         1位   如果为1，则加上带符号偏移量将字符转换为小写
         1位   如果为1，则减去带符号偏移量将字符转换为大写
         1位   如果为1，则此字符有标题大小写等效形式（可能是其本身）
         3位   0  不能是标识符的一部分
                 1  可忽略的控制字符；可延续Unicode标识符或Java标识符
                 2  可延续Java标识符但不能延续Unicode标识符（未使用）
                 3  可延续Unicode标识符或Java标识符
                 4  是Java空白字符
                 5  可开始或延续Java标识符；
                    可延续但不能开始Unicode标识符（下划线）
                 6  可开始或延续Java标识符但不能开始Unicode标识符（$）
                 7  可开始或延续Unicode标识符或Java标识符
                 因此：
                    5、6、7可开始Java标识符
                    1、2、3、5、6、7可延续Java标识符
                    7可开始Unicode标识符
                    1、3、5、7可延续Unicode标识符
                    1在标识符中可忽略
                    4是Java空白字符
         2位   0  此字符没有数字属性
                 1  将数字偏移量加到字符代码上，然后
                    与0x1F进行掩码运算将产生所需的数值
                 2  此字符有"特殊"的数值
                 3  Java超十进制数字：将数字偏移量加到
                    字符代码上，然后与0x1F进行掩码运算，然后加10
                    将产生所需的数值
         5位   数字偏移量
         5位   字符类型
 
         字符属性的编码随时可能更改。
      */
 
     int getProperties(int ch) {
         char offset = (char)ch;
         int props = A[Y[X[offset>>5]|((offset>>1)&0xF)]|(offset&0x1)];
         return props;
     }
 
     int getPropertiesEx(int ch) {
         char offset = (char)ch;
         int props = B[Y[X[offset>>5]|((offset>>1)&0xF)]|(offset&0x1)];
         return props;
     }
 
     boolean isOtherLowercase(int ch) {
         int props = getPropertiesEx(ch);
         return (props & 0x0001) != 0;
     }
 
     boolean isOtherUppercase(int ch) {
         int props = getPropertiesEx(ch);
         return (props & 0x0002) != 0;
     }
 
     boolean isOtherAlphabetic(int ch) {
         int props = getPropertiesEx(ch);
         return (props & 0x0004) != 0;
     }
 
     boolean isIdeographic(int ch) {
         int props = getPropertiesEx(ch);
         return (props & 0x0010) != 0;
     }
 
     int getType(int ch) {
         int props = getProperties(ch);
         return (props & 0x1F);
     }
 
     boolean isJavaIdentifierStart(int ch) {
         int props = getProperties(ch);
         return ((props & 0x00007000) >= 0x00005000);
     }
 
     boolean isJavaIdentifierPart(int ch) {
         int props = getProperties(ch);
         return ((props & 0x00003000) != 0);
     }
 
     boolean isUnicodeIdentifierStart(int ch) {
         int props = getProperties(ch);
         return ((props & 0x00007000) == 0x00007000);
     }
 
     boolean isUnicodeIdentifierPart(int ch) {
         int props = getProperties(ch);
         return ((props & 0x00001000) != 0);
     }
 
     boolean isIdentifierIgnorable(int ch) {
         int props = getProperties(ch);
         return ((props & 0x00007000) == 0x00001000);
     }
 
     int toLowerCase(int ch) {
         int mapChar = ch;
         int val = getProperties(ch);
 
         if ((val & 0x00020000) != 0) {
             int offset = val << 5 >> (5+18);
             mapChar = ch + offset;
         }
         return mapChar;
     }
 
     int toUpperCase(int ch) {
         int mapChar = ch;
         int val = getProperties(ch);
 
         if ((val & 0x00010000) != 0) {
             int offset = val << 5 >> (5+18);
             mapChar = ch - offset;
         }
         return mapChar;
     }
 
     int toTitleCase(int ch) {
         int mapChar = ch;
         int val = getProperties(ch);
 
         if ((val & 0x00008000) != 0) {
             // 有标题大小写等效形式。执行进一步检查：
             if ((val & 0x00010000) == 0) {
                 // 该字符没有大写等效形式，因此它必须
                 // 已经是大写；因此加1以获得标题大小写形式。
                 mapChar = ch + 1;
             }
             else if ((val & 0x00020000) == 0) {
                 // 该字符没有小写等效形式，因此它必须
                 // 已经是小写；因此减1以获得标题大小写形式。
                 mapChar = ch - 1;
             }
             // else {
             // 该字符既有大写等效形式又有小写等效形式，
             // 因此它本身必须是标题大小写形式；返回它。
             // return ch;
             //}
         }
         else if ((val & 0x00010000) != 0) {
             // 此字符没有标题大小写等效形式但有大写等效形式，因此使用该形式（减去带符号的大小写偏移量）。
             mapChar = toUpperCase(ch);
         }
         return mapChar;
     }
 
     int digit(int ch, int radix) {
         int value = -1;
         if (radix >= Character.MIN_RADIX && radix <= Character.MAX_RADIX) {
             int val = getProperties(ch);
             int kind = val & 0x1F;
             if (kind == Character.DECIMAL_DIGIT_NUMBER) {
                 value = ch + ((val & 0x3E0) >> 5) & 0x1F;
             }
             else if ((val & 0xC00) == 0x00000C00) {
                 // Java超十进制数字
                 value = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
             }
         }
         return (value < radix) ? value : -1;
     }
 
     int getNumericValue(int ch) {
         int val = getProperties(ch);
         int retval = -1;
 
         switch (val & 0xC00) {
         default: // 不可能发生
         case (0x00000000):         // 非数字
             retval = -1;
             break;
         case (0x00000400):         // 简单数字
             retval = ch + ((val & 0x3E0) >> 5) & 0x1F;
             break;
         case (0x00000800):         // "特殊"数字
             retval = -2;
             break;
         case (0x00000C00):         // Java超十进制
             retval = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
             break;
         }
         return retval;
     }
 
     boolean isWhitespace(int ch) {
         return (getProperties(ch) & 0x00007000) == 0x00004000;
     }
 
     byte getDirectionality(int ch) {
         int val = getProperties(ch);
         byte directionality = (byte)((val & 0x78000000) >> 27);
         if (directionality == 0xF ) {
             directionality = Character.DIRECTIONALITY_UNDEFINED;
         }
         return directionality;
     }
 
     boolean isMirrored(int ch) {
         return (getProperties(ch) & 0x80000000) != 0;
     }
 
     static final CharacterData instance = new CharacterData02();
     private CharacterData02() {};
 
     // 以下表格和代码使用以下命令生成：
   // java GenerateCharacter -plane 2 -template c:/jenkins/workspace/8-2-build-windows-x64-cygwin/jdk8u341/2692/jdk/make/data/characterdata/CharacterData02.java.template -spec c:/jenkins/workspace/8-2-build-windows-x64-cygwin/jdk8u341/2692/jdk/make/data/unicodedata/UnicodeData.txt -specialcasing c:/jenkins/workspace/8-2-build-windows-x64-cygwin/jdk8u341/2692/jdk/make/data/unicodedata/SpecialCasing.txt -proplist c:/jenkins/workspace/8-2-build-windows-x64-cygwin/jdk8u341/2692/jdk/make/data/unicodedata/PropList.txt -o c:/jenkins/workspace/8-2-build-windows-x64-cygwin/jdk8u341/2692/build/windows-x64/jdk/gensrc/java/lang/CharacterData02.java -string -usecharforbyte 11 4 1
   // X表有2048个条目，总共4096字节。
   
  static final char X[] = (
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\020\040\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\060\000\000\000\000\000\000\100\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\000\000\000\000\120\000\000\000\000\000\000"+
    "\000\000\000\000\000\100\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040").toCharArray();

  // The Y table has 96 entries for a total of 192 bytes.

  static final char Y[] = (
    "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\000\000\000\000\000\002\004\004\004\004\004\004\004\004\004\004"+
    "\004\004\004\004\004\004\004\004\004\004\000\000\000\000\000\000\000\000\000"+
    "\000\002\004\004\004\004\004\000\000\000\000\000\000\000\000\000\000\000\000"+
    "\000\000\000\004\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000"+
    "\000").toCharArray();

  // The A table has 8 entries for a total of 32 bytes.

  static final int A[] = new int[8];
  static final String A_DATA =
    "\000\u7005\000\u7005\000\u7005\u7800\000\u7800\000\u7800\000\000\u7725\000"+
    "\u7005";

  // The B table has 8 entries for a total of 16 bytes.

  static final char B[] = (
    "\020\020\020\000\000\000\020\020").toCharArray();

  // In all, the character property tables require 4320 bytes.

    static {
                { // THIS CODE WAS AUTOMATICALLY CREATED BY GenerateCharacter:
            char[] data = A_DATA.toCharArray();
            assert (data.length == (8 * 2));
            int i = 0, j = 0;
            while (i < (8 * 2)) {
                int entry = data[i++] << 16;
                A[j++] = entry | data[i++];
            }
        }

    }        
}
