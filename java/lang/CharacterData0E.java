// 本文件由模板文件于 2022 年 6 月 16 日星期四 15:54:15 UTC 自动生成
/*
 * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

 package java.lang;

 /** CharacterData 类封装了 Java.lang.Character 中的大型表。 */
 
 class CharacterData0E extends CharacterData {
     /* 字符属性当前按以下方式编码为 32 位：
         1 位   镜像属性
         4 位   方向性属性
         9 位   用于转换大小写的有符号偏移量
         1 位   如果为 1，加上有符号偏移量将字符转换为小写
         1 位   如果为 1，减去有符号偏移量将字符转换为大写
         1 位   如果为 1，此字符具有标题大小写等效项（可能是自身）
         3 位   0 可能不是标识符的一部分
                 1 可忽略的控制符；可延续 Unicode 标识符或 Java 标识符
                 2 可延续 Java 标识符但不可延续 Unicode 标识符（未使用）
                 3 可延续 Unicode 标识符或 Java 标识符
                 4 是 Java 空白字符
                 5 可开始或延续 Java 标识符；
                    可延续但不可开始 Unicode 标识符（下划线）
                 6 可开始或延续 Java 标识符但不可开始 Unicode 标识符（$）
                 7 可开始或延续 Unicode 标识符或 Java 标识符
         因此：
            5、6、7 可开始 Java 标识符
            1、2、3、5、6、7 可延续 Java 标识符
            7 可开始 Unicode 标识符
            1、3、5、7 可延续 Unicode 标识符
            1 在标识符内可忽略
            4 是 Java 空白字符
         2 位   0 此字符无数字属性
                 1 将数字偏移量添加到字符代码，然后用 0x1F 掩码将产生所需的数字值
                 2 此字符具有“特殊”数字值
                 3 Java 超十进制数字：将数字偏移量添加到字符代码，然后用 0x1F 掩码，然后加 10 将产生所需的数字值
         5 位   数字偏移量
         5 位   字符类型
 
         字符属性的编码可能随时更改。
      */
 
     int getProperties(int ch) {
         char offset = (char)ch;
         int props = A[Y[X[offset>>5]|((offset>>1)&0xF)]|(offset&0x1)];
         return props;
     }
 
     int getPropertiesEx(int ch) {
         char offset = (char)ch;
         int props = B[Y[X[offset>>5]|((offset>>1)&0xF)]|(offset&0x1)];
         return props;
     }
 
     boolean isOtherLowercase(int ch) {
         int props = getPropertiesEx(ch);
         return (props & 0x0001) != 0;
     }
 
     boolean isOtherUppercase(int ch) {
         int props = getPropertiesEx(ch);
         return (props & 0x0002) != 0;
     }
 
     boolean isOtherAlphabetic(int ch) {
         int props = getPropertiesEx(ch);
         return (props & 0x0004) != 0;
     }
 
     boolean isIdeographic(int ch) {
         int props = getPropertiesEx(ch);
         return (props & 0x0010) != 0;
     }
 
     int getType(int ch) {
         int props = getProperties(ch);
         return (props & 0x1F);
     }
 
     boolean isJavaIdentifierStart(int ch) {
         int props = getProperties(ch);
         return ((props & 0x00007000) >= 0x00005000);
     }
 
     boolean isJavaIdentifierPart(int ch) {
         int props = getProperties(ch);
         return ((props & 0x00003000) != 0);
     }
 
     boolean isUnicodeIdentifierStart(int ch) {
         int props = getProperties(ch);
         return ((props & 0x00007000) == 0x00007000);
     }
 
     boolean isUnicodeIdentifierPart(int ch) {
         int props = getProperties(ch);
         return ((props & 0x00001000) != 0);
     }
 
     boolean isIdentifierIgnorable(int ch) {
         int props = getProperties(ch);
         return ((props & 0x00007000) == 0x00001000);
     }
 
     int toLowerCase(int ch) {
         int mapChar = ch;
         int val = getProperties(ch);
 
         if ((val & 0x00020000) != 0) {
             int offset = val << 5 >> (5+18);
             mapChar = ch + offset;
         }
         return mapChar;
     }
 
     int toUpperCase(int ch) {
         int mapChar = ch;
         int val = getProperties(ch);
 
         if ((val & 0x00010000) != 0) {
             int offset = val  << 5 >> (5+18);
             mapChar =  ch - offset;
         }
         return mapChar;
     }
 
     int toTitleCase(int ch) {
         int mapChar = ch;
         int val = getProperties(ch);
 
         if ((val & 0x00008000) != 0) {
             // 存在标题大小写等效项。执行进一步检查：
             if ((val & 0x00010000) == 0) {
                 // 该字符没有大写等效项，因此它必须已经是大写；因此加 1 以获取标题大小写形式。
                 mapChar = ch + 1;
             }
             else if ((val & 0x00020000) == 0) {
                 // 该字符没有小写等效项，因此它必须已经是小写；因此减 1 以获取标题大小写形式。
                 mapChar = ch - 1;
             }
             // else {
             // 该字符同时具有大写等效项和小写等效项，因此它本身必须是标题大小写形式；返回它。
             // return ch;
             //}
         }
         else if ((val & 0x00010000) != 0) {
             // 此字符没有标题大小写等效项，但它有一个大写等效项，因此使用该等效项（减去有符号大小写偏移量）。
             mapChar = toUpperCase(ch);
         }
         return mapChar;
     }
 
     int digit(int ch, int radix) {
         int value = -1;
         if (radix >= Character.MIN_RADIX && radix <= Character.MAX_RADIX) {
             int val = getProperties(ch);
             int kind = val & 0x1F;
             if (kind == Character.DECIMAL_DIGIT_NUMBER) {
                 value = ch + ((val & 0x3E0) >> 5) & 0x1F;
             }
             else if ((val & 0xC00) == 0x00000C00) {
                 // Java 超十进制数字
                 value = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
             }
         }
         return (value < radix) ? value : -1;
     }
 
     int getNumericValue(int ch) {
         int val = getProperties(ch);
         int retval = -1;
 
         switch (val & 0xC00) {
         default: // 不可能发生
         case (0x00000000):         // 非数字
             retval = -1;
             break;
         case (0x00000400):              // 简单数字
             retval = ch + ((val & 0x3E0) >> 5) & 0x1F;
             break;
         case (0x00000800)      :       // "特殊" 数字
             retval = -2;
             break;
         case (0x00000C00):           // Java 超十进制
             retval = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
             break;
         }
         return retval;
     }
 
     boolean isWhitespace(int ch) {
         int props = getProperties(ch);
         return ((props & 0x00007000) == 0x00004000);
     }
 
     byte getDirectionality(int ch) {
         int val = getProperties(ch);
         byte directionality = (byte)((val & 0x78000000) >> 27);
         if (directionality == 0xF ) {
             directionality = Character.DIRECTIONALITY_UNDEFINED;
         }
         return directionality;
     }
 
     boolean isMirrored(int ch) {
         int props = getProperties(ch);
         return ((props & 0x80000000) != 0);
     }
 
     static final CharacterData instance = new CharacterData0E();
     private CharacterData0E() {};
 
     // 以下表和代码使用以下命令生成：
   // java GenerateCharacter -plane 14 -template c:/jenkins/workspace/8-2-build-windows-x64-cygwin/jdk8u341/2692/jdk/make/data/characterdata/CharacterData0E.java.template -spec c:/jenkins/workspace/8-2-build-windows-x64-cygwin/jdk8u341/2692/jdk/make/data/unicodedata/UnicodeData.txt -specialcasing c:/jenkins/workspace/8-2-build-windows-x64-cygwin/jdk8u341/2692/jdk/make/data/unicodedata/SpecialCasing.txt -proplist c:/jenkins/workspace/8-2-build-windows-x64-cygwin/jdk8u341/2692/jdk/make/data/unicodedata/PropList.txt -o c:/jenkins/workspace/8-2-build-windows-x64-cygwin/jdk8u341/2692/build/windows-x64/jdk/gensrc/java/lang/CharacterData0E.java -string -usecharforbyte 11 4 1
   // X 表有 2048 个条目，共 4096 字节。
 
   static final char X[] = (
    "\000\020\020\020\040\040\040\040\060\060\060\060\060\060\060\100\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040"+
    "\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040").toCharArray();

    // Y表包含80个条目，共占用160字节。

    static final char Y[] = (
        "\000\002\002\002\002\002\002\002\002\002\002\002\002\002\002\002\004\004\004"+
        "\004\004\004\004\004\004\004\004\004\004\004\004\004\002\002\002\002\002\002"+
        "\002\002\002\002\002\002\002\002\002\002\006\006\006\006\006\006\006\006\006"+
        "\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\002\002\002\002"+
        "\002\002\002\002").toCharArray();

    // A表包含8个条目，共占用32字节。

    static final int A[] = new int[8];
    static final String A_DATA =
        "\u7800\000\u4800\u1010\u7800\000\u7800\000\u4800\u1010\u4800\u1010\u4000\u3006"+
        "\u4000\u3006";

    // B表包含8个条目，共占用16字节。

    static final char B[] = (
        "\000\000\000\000\000\000\000\000").toCharArray();

    // 字符属性表总共需要4288字节的内存空间。

    static {
                { // 此代码由GenerateCharacter工具自动生成:
            char[] data = A_DATA.toCharArray();
            assert (data.length == (8 * 2));
            int i = 0, j = 0;
            while (i < (8 * 2)) {
                int entry = data[i++] << 16;
                A[j++] = entry | data[i++];
            }
        }

    }        

}
