
/*
 * Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

#warn This file is preprocessed before being compiled

package java.nio.charset;

import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.lang.ref.WeakReference;
import java.nio.charset.CoderMalfunctionError;                  // javadoc
import java.util.Arrays;


/**
 * 一个可以将 $itypesPhrase$ 序列转换为 $otypesPhrase$ 序列的引擎。
 *
 * <a name="steps"></a>
 *
 * <p> 输入 $itype$ 序列通过一个 $itype$ 缓冲区或一系列这样的缓冲区提供。输出 $otype$ 序列写入一个 $otype$ 缓冲区或一系列这样的缓冲区。$A$ $coder$ 应该始终通过以下方法调用序列使用，这里称为 $a$ <i>$coding$ 操作</i>：
 *
 * <ol>
 *
 *   <li><p> 通过 {@link #reset reset} 方法重置 $coder$，除非它之前未被使用过； </p></li>
 *
 *   <li><p> 通过传递 <tt>false</tt> 作为 <tt>endOfInput</tt> 参数调用 {@link #$code$ $code$} 方法零次或多次，只要可能有更多输入，调用之间填充输入缓冲区并刷新输出缓冲区； </p></li>
 *
 *   <li><p> 通过传递 <tt>true</tt> 作为 <tt>endOfInput</tt> 参数调用 {@link #$code$ $code$} 方法一次；然后 </p></li>
 *
 *   <li><p> 调用 {@link #flush flush} 方法，以便 $coder$ 可以将内部状态刷新到输出缓冲区。 </p></li>
 *
 * </ol>
 *
 * 每次调用 {@link #$code$ $code$} 方法时，都会尽可能多地从输入缓冲区 $code$ $itype$s，将生成的 $otype$s 写入输出缓冲区。当需要更多输入时，当输出缓冲区空间不足时，或当发生 $a$ $coding$ 错误时，该方法会返回。在每种情况下，都会返回一个 {@link CoderResult} 对象来描述终止的原因。调用者可以检查此对象，填充输入缓冲区，刷新输出缓冲区，或尝试从 $a$ $coding$ 错误中恢复，然后重试。
 *
 * <a name="ce"></a>
 *
 * <p> 有两种类型的 $coding$ 错误。如果输入 $itype$ 序列 $notLegal$，则输入被认为是 <i>malformed</i>。如果输入 $itype$ 序列合法但不能映射到有效的 $outSequence$，则遇到了 <i>unmappable character</i>。
 *
 * <a name="cae"></a>
 *
 * <p> 如何处理 $a$ $coding$ 错误取决于请求的该类型错误的处理方式，这由 {@link CodingErrorAction} 类的实例描述。可能的错误处理方式是 {@linkplain CodingErrorAction#IGNORE 忽略} 错误输入，{@linkplain CodingErrorAction#REPORT 通过返回的 {@link CoderResult} 对象报告} 错误，或 {@linkplain CodingErrorAction#REPLACE 用当前的替换 $replTypeName$ 替换} 错误输入。替换
 *
#if[encoder]
 * 初始设置为 $coder$ 的默认替换，这通常（但不总是）具有初始值 $defaultReplName$；
#end[encoder]
#if[decoder]
 * 具有初始值 $defaultReplName$；
#end[decoder]
 *
 * 其值可以通过 {@link #replaceWith($replFQType$) replaceWith} 方法更改。
 *
 * <p> 默认情况下，malformed-input 和 unmappable-character 错误将 {@linkplain CodingErrorAction#REPORT 报告}。可以通过 {@link #onMalformedInput(CodingErrorAction) onMalformedInput} 方法更改 malformed-input 错误处理方式；可以通过 {@link #onUnmappableCharacter(CodingErrorAction) onUnmappableCharacter} 方法更改 unmappable-character 错误处理方式。
 *
 * <p> 本类旨在处理 $coding$ 过程中的许多细节，包括错误处理的实现。$A$ $coder$ 为特定字符集的具体实现，即本类的子类，只需要实现抽象的 {@link #$code$Loop $code$Loop} 方法，该方法封装了基本的 $coding$ 循环。维护内部状态的子类还应重写 {@link #implFlush implFlush} 和 {@link #implReset implReset} 方法。
 *
 * <p> 本类的实例不适合多个并发线程使用。 </p>
 *
 *
 * @author Mark Reinhold
 * @author JSR-51 Expert Group
 * @since 1.4
 *
 * @see ByteBuffer
 * @see CharBuffer
 * @see Charset
 * @see Charset$OtherCoder$
 */

public abstract class Charset$Coder$ {

    private final Charset charset;
    private final float average$ItypesPerOtype$;
    private final float max$ItypesPerOtype$;

    private $replType$ replacement;
    private CodingErrorAction malformedInputAction
        = CodingErrorAction.REPORT;
    private CodingErrorAction unmappableCharacterAction
        = CodingErrorAction.REPORT;

    // 内部状态
    //
    private static final int ST_RESET   = 0;
    private static final int ST_CODING  = 1;
    private static final int ST_END     = 2;
    private static final int ST_FLUSHED = 3;

    private int state = ST_RESET;

    private static String stateNames[]
        = { "RESET", "CODING", "CODING_END", "FLUSHED" };


    /**
     * 初始化一个新的 $coder$。新的 $coder$ 将具有给定的 $otypes-per-itype$ 和替换值。
     *
     * @param  cs
     *         创建此 $coder$ 的字符集
     *
     * @param  average$ItypesPerOtype$
     *         表示每个输入 $itype$ 预期产生的 $otype$s 数量的正浮点值
     *
     * @param  max$ItypesPerOtype$
     *         表示每个输入 $itype$ 最多产生的 $otype$s 数量的正浮点值
     *
     * @param  replacement
     *         初始替换；不得为 <tt>null</tt>，长度不得为零，长度不得超过 max$ItypesPerOtype$，且必须是 {@linkplain #isLegalReplacement 合法} 的
     *
     * @throws  IllegalArgumentException
     *          如果参数的前置条件不满足
     */
    {#if[encoder]?protected:private}
    Charset$Coder$(Charset cs,
                   float average$ItypesPerOtype$,
                   float max$ItypesPerOtype$,
                   $replType$ replacement)
    {
        this.charset = cs;
        if (average$ItypesPerOtype$ <= 0.0f)
            throw new IllegalArgumentException("Non-positive "
                                               + "average$ItypesPerOtype$");
        if (max$ItypesPerOtype$ <= 0.0f)
            throw new IllegalArgumentException("Non-positive "
                                               + "max$ItypesPerOtype$");
        if (!Charset.atBugLevel("1.4")) {
            if (average$ItypesPerOtype$ > max$ItypesPerOtype$)
                throw new IllegalArgumentException("average$ItypesPerOtype$"
                                                   + " exceeds "
                                                   + "max$ItypesPerOtype$");
        }
        this.replacement = replacement;
        this.average$ItypesPerOtype$ = average$ItypesPerOtype$;
        this.max$ItypesPerOtype$ = max$ItypesPerOtype$;
        replaceWith(replacement);
    }

    /**
     * 初始化一个新的 $coder$。新的 $coder$ 将具有给定的 $otypes-per-itype$ 值，其替换值为 $replTypeName$ $defaultReplName$。
     *
     * @param  cs
     *         创建此 $coder$ 的字符集
     *
     * @param  average$ItypesPerOtype$
     *         表示每个输入 $itype$ 预期产生的 $otype$s 数量的正浮点值
     *
     * @param  max$ItypesPerOtype$
     *         表示每个输入 $itype$ 最多产生的 $otype$s 数量的正浮点值
     *
     * @throws  IllegalArgumentException
     *          如果参数的前置条件不满足
     */
    protected Charset$Coder$(Charset cs,
                             float average$ItypesPerOtype$,
                             float max$ItypesPerOtype$)
    {
        this(cs,
             average$ItypesPerOtype$, max$ItypesPerOtype$,
             $defaultRepl$);
    }

    /**
     * 返回创建此 $coder$ 的字符集。
     *
     * @return  此 $coder$ 的字符集
     */
    public final Charset charset() {
        return charset;
    }

    /**
     * 返回此 $coder$ 的替换值。
     *
     * @return  此 $coder$ 的当前替换值，从不为 <tt>null</tt> 且从不为空
     */
    public final $replType$ replacement() {
#if[decoder]
        return replacement;
#end[decoder]
#if[encoder]
        return Arrays.copyOf(replacement, replacement.$replLength$);
#end[encoder]
    }

    /**
     * 更改此 $coder$ 的替换值。
     *
     * <p> 此方法在检查新替换值是否可接受后，调用 {@link #implReplaceWith implReplaceWith} 方法，传递新的替换值。 </p>
     *
     * @param  newReplacement  替换值
     *
#if[decoder]
     *         新的替换值；不得为 <tt>null</tt> 且长度不得为零
#end[decoder]
#if[encoder]
     *         新的替换值；不得为 <tt>null</tt>，长度不得为零，长度不得超过 {@link #max$ItypesPerOtype$() max$ItypesPerOtype$} 方法返回的值，且必须是 {@link #isLegalReplacement 合法} 的
#end[encoder]
     *
     * @return  此 $coder$
     *
     * @throws  IllegalArgumentException
     *          如果参数的前置条件不满足
     */
    public final Charset$Coder$ replaceWith($replType$ newReplacement) {
        if (newReplacement == null)
            throw new IllegalArgumentException("Null replacement");
        int len = newReplacement.$replLength$;
        if (len == 0)
            throw new IllegalArgumentException("Empty replacement");
        if (len > max$ItypesPerOtype$)
            throw new IllegalArgumentException("Replacement too long");
#if[decoder]
        this.replacement = newReplacement;
#end[decoder]
#if[encoder]
        if (!isLegalReplacement(newReplacement))
            throw new IllegalArgumentException("Illegal replacement");
        this.replacement = Arrays.copyOf(newReplacement, newReplacement.$replLength$);
#end[encoder]
        implReplaceWith(this.replacement);
        return this;
    }

    /**
     * 报告此 $coder$ 的替换值更改。
     *
     * <p> 此方法的默认实现不执行任何操作。需要替换值更改通知的 $coder$ 应重写此方法。 </p>
     *
     * @param  newReplacement    替换值
     */
    protected void implReplaceWith($replType$ newReplacement) {
    }

#if[encoder]

    private WeakReference<CharsetDecoder> cachedDecoder = null;

    /**
     * 告诉给定的字节数组是否是此编码器的合法替换值。
     *
     * <p> 替换值合法当且仅当它是此编码器字符集中的合法字节序列；即，必须能够将其解码为一个或多个十六位 Unicode 字符。
     *
     * <p> 此方法的默认实现效率不高；通常应重写以提高性能。 </p>
     *
     * @param  repl  要测试的字节数组
     *
     * @return  <tt>true</tt> 当且仅当给定的字节数组是此编码器的合法替换值
     */
    public boolean isLegalReplacement(byte[] repl) {
        WeakReference<CharsetDecoder> wr = cachedDecoder;
        CharsetDecoder dec = null;
        if ((wr == null) || ((dec = wr.get()) == null)) {
            dec = charset().newDecoder();
            dec.onMalformedInput(CodingErrorAction.REPORT);
            dec.onUnmappableCharacter(CodingErrorAction.REPORT);
            cachedDecoder = new WeakReference<CharsetDecoder>(dec);
        } else {
            dec.reset();
        }
        ByteBuffer bb = ByteBuffer.wrap(repl);
        CharBuffer cb = CharBuffer.allocate((int)(bb.remaining()
                                                  * dec.maxCharsPerByte()));
        CoderResult cr = dec.decode(bb, cb, true);
        return !cr.isError();
    }

#end[encoder]

    /**
     * 返回此 $coder$ 当前的 malformed-input 错误处理方式。
     *
     * @return 当前的 malformed-input 错误处理方式，从不为 <tt>null</tt>
     */
    public CodingErrorAction malformedInputAction() {
        return malformedInputAction;
    }

    /**
     * 更改此 $coder$ 的 malformed-input 错误处理方式。
     *
     * <p> 此方法调用 {@link #implOnMalformedInput implOnMalformedInput} 方法，传递新的处理方式。 </p>
     *
     * @param  newAction  新的处理方式；不得为 <tt>null</tt>
     *
     * @return  此 $coder$
     *
     * @throws IllegalArgumentException
     *         如果参数的前置条件不满足
     */
    public final Charset$Coder$ onMalformedInput(CodingErrorAction newAction) {
        if (newAction == null)
            throw new IllegalArgumentException("Null action");
        malformedInputAction = newAction;
        implOnMalformedInput(newAction);
        return this;
    }

    /**
     * 报告此 $coder$ 的 malformed-input 错误处理方式更改。
     *
     * <p> 此方法的默认实现不执行任何操作。需要 malformed-input 错误处理方式更改通知的 $coder$ 应重写此方法。 </p>
     *
     * @param  newAction  新的处理方式
     */
    protected void implOnMalformedInput(CodingErrorAction newAction) { }


/**
 * 返回此 $coder$ 的当前不可映射字符错误操作。
 *
 * @return 当前的不可映射字符操作，绝不会为 <tt>null</tt>
 */
public CodingErrorAction unmappableCharacterAction() {
    return unmappableCharacterAction;
}

/**
 * 更改此 $coder$ 的不可映射字符错误操作。
 *
 * <p> 此方法调用 {@link #implOnUnmappableCharacter
 * implOnUnmappableCharacter} 方法，传递新的操作。 </p>
 *
 * @param  newAction  新的操作；绝不能为 <tt>null</tt>
 *
 * @return  此 $coder$
 *
 * @throws IllegalArgumentException
 *         如果参数的前置条件不成立
 */
public final Charset$Coder$ onUnmappableCharacter(CodingErrorAction
                                                  newAction)
{
    if (newAction == null)
        throw new IllegalArgumentException("Null action");
    unmappableCharacterAction = newAction;
    implOnUnmappableCharacter(newAction);
    return this;
}

/**
 * 报告此 $coder$ 的不可映射字符操作的更改。
 *
 * <p> 此方法的默认实现不执行任何操作。需要通知不可映射字符操作更改的 $coder$ 应覆盖此方法。 </p>
 *
 * @param  newAction  新的操作
 */
protected void implOnUnmappableCharacter(CodingErrorAction newAction) { }

/**
 * 返回每个输入 $itype$ 将产生的 $otype$ 的平均数量。此启发式值可用于估计给定输入序列所需的输出缓冲区大小。
 *
 * @return 每个输入 $itype$ 产生的 $otype$ 的平均数量
 */
public final float average$ItypesPerOtype$() {
    return average$ItypesPerOtype$;
}

/**
 * 返回每个输入 $itype$ 将产生的 $otype$ 的最大数量。此值可用于计算给定输入序列所需的输出缓冲区的最大大小。
 *
 * @return 每个输入 $itype$ 产生的 $otype$ 的最大数量
 */
public final float max$ItypesPerOtype$() {
    return max$ItypesPerOtype$;
}

/**
 * 从给定的输入缓冲区尽可能多地 $code$ 输入 $itype$，并将结果写入给定的输出缓冲区。
 *
 * <p> 从缓冲区的当前位置开始读取和写入。最多读取 {@link Buffer#remaining in.remaining()} 个 $itype$，最多写入 {@link Buffer#remaining out.remaining()} 个 $otype$。缓冲区的位置将被推进以反映读取的 $itype$ 和写入的 $otype$，但它们的标记和限制不会被修改。
 *
 * <p> 除了从输入缓冲区读取 $itype$ 并将 $otype$ 写入输出缓冲区之外，此方法还返回一个 {@link CoderResult} 对象来描述其终止原因：
 *
 * <ul>
 *
 *   <li><p> {@link CoderResult#UNDERFLOW} 表示已尽可能多地 $code$ 了输入缓冲区。如果没有进一步的输入，则调用者可以继续进行 <a href="#steps">$coding$ 操作</a> 的下一步。否则应使用更多输入再次调用此方法。 </p></li>
 *
 *   <li><p> {@link CoderResult#OVERFLOW} 表示输出缓冲区的空间不足以 $code$ 更多的 $itype$。应使用具有更多 {@linkplain Buffer#remaining 剩余} $otype$ 的输出缓冲区再次调用此方法。通常通过从输出缓冲区中排出任何 $code$d $otype$ 来完成。 </p></li>
 *
 *   <li><p> 一个 {@linkplain CoderResult#malformedForLength
 *   不合法输入} 结果表示检测到了不合法输入错误。不合法的 $itype$ 从输入缓冲区的（可能已递增的）位置开始；不合法 $itype$ 的数量可以通过调用结果对象的 {@link
 *   CoderResult#length() length} 方法来确定。此情况仅适用于此 $coder$ 的 {@linkplain #onMalformedInput 不合法输入操作} 为 {@link CodingErrorAction#REPORT}；否则将忽略或替换不合法输入，如请求的那样。 </p></li>
 *
 *   <li><p> 一个 {@linkplain CoderResult#unmappableForLength
 *   不可映射字符} 结果表示检测到了不可映射字符错误。编码不可映射字符的 $itype$ 从输入缓冲区的（可能已递增的）位置开始；此类 $itype$ 的数量可以通过调用结果对象的 {@link CoderResult#length() length}
 *   方法来确定。此情况仅适用于此 $coder$ 的 {@linkplain #onUnmappableCharacter
 *   不可映射字符操作} 为 {@link
 *   CodingErrorAction#REPORT}；否则将忽略或替换不可映射字符，如请求的那样。 </p></li>
 *
 * </ul>
 *
 * 无论哪种情况，如果此方法将在同一 $coding$ 操作中重新调用，则应小心保留输入缓冲区中剩余的任何 $itype$，以便它们可用于下次调用。
 *
 * <p> <tt>endOfInput</tt> 参数告知此方法调用者是否可以提供给定输入缓冲区之外的进一步输入。如果有可能提供额外输入，则调用者应为此参数传递 <tt>false</tt>；如果没有可能提供进一步输入，则调用者应传递 <tt>true</tt>。虽然传递 <tt>false</tt> 并在稍后发现没有实际可用的进一步输入并不错误，实际上也很常见，但在一系列调用中的最终调用必须始终传递 <tt>true</tt>，以便将任何剩余的未 $code$ 输入视为不合法。
 *
 * <p> 此方法通过调用 {@link #$code$Loop $code$Loop} 方法，解释其结果，处理错误条件，并在必要时重新调用它来工作。 </p>
 *
 *
 * @param  in
 *         输入 $itype$ 缓冲区
 *
 * @param  out
 *         输出 $otype$ 缓冲区
 *
 * @param  endOfInput
 *         <tt>true</tt> 表示调用者不能提供给定缓冲区之外的任何额外输入 $itype$；<tt>false</tt> 表示可以
 *
 * @return  一个描述终止原因的 coder 结果对象
 *
 * @throws  IllegalStateException
 *          如果 $coding$ 操作已经在进行中，且上一步既不是调用 {@link #reset reset}
 *          方法，也不是调用此方法并传递 <tt>false</tt> 作为 <tt>endOfInput</tt> 参数，也不是调用此方法并传递 <tt>true</tt> 作为 <tt>endOfInput</tt> 参数但返回值表示不完整的 $coding$ 操作
 *
 * @throws  CoderMalfunctionError
 *          如果 $code$Loop 方法抛出了意外的异常
 */
public final CoderResult $code$($Itype$Buffer in, $Otype$Buffer out,
                                boolean endOfInput)
{
    int newState = endOfInput ? ST_END : ST_CODING;
    if ((state != ST_RESET) && (state != ST_CODING)
        && !(endOfInput && (state == ST_END)))
        throwIllegalStateException(state, newState);
    state = newState;

    for (;;) {

        CoderResult cr;
        try {
            cr = $code$Loop(in, out);
        } catch (BufferUnderflowException x) {
            throw new CoderMalfunctionError(x);
        } catch (BufferOverflowException x) {
            throw new CoderMalfunctionError(x);
        }

        if (cr.isOverflow())
            return cr;

        if (cr.isUnderflow()) {
            if (endOfInput && in.hasRemaining()) {
                cr = CoderResult.malformedForLength(in.remaining());
                // 跳转到不合法输入情况
            } else {
                return cr;
            }
        }

        CodingErrorAction action = null;
        if (cr.isMalformed())
            action = malformedInputAction;
        else if (cr.isUnmappable())
            action = unmappableCharacterAction;
        else
            assert false : cr.toString();

        if (action == CodingErrorAction.REPORT)
            return cr;

        if (action == CodingErrorAction.REPLACE) {
            if (out.remaining() < replacement.$replLength$)
                return CoderResult.OVERFLOW;
            out.put(replacement);
        }

        if ((action == CodingErrorAction.IGNORE)
            || (action == CodingErrorAction.REPLACE)) {
            // 无论哪种方式都跳过错误输入
            in.position(in.position() + cr.length());
            continue;
        }

        assert false;
    }

}

/**
 * 刷新此 $coder$。
 *
 * <p> 一些 $coder$ 维护内部状态，可能需要在读取整个输入序列后将一些最终的 $otype$ 写入输出缓冲区。
 *
 * <p> 任何额外的输出将从输出缓冲区的当前位置开始写入。最多写入 {@link Buffer#remaining out.remaining()}
 * 个 $otype$。缓冲区的位置将被适当推进，但其标记和限制不会被修改。
 *
 * <p> 如果此方法成功完成，则返回 {@link
 * CoderResult#UNDERFLOW}。如果输出缓冲区的空间不足，则返回 {@link CoderResult#OVERFLOW}。如果发生这种情况，则必须使用具有更多空间的输出缓冲区再次调用此方法，以完成当前的 <a href="#steps">$coding$
 * 操作</a>。
 *
 * <p> 如果此 $coder$ 已经被刷新，则调用此方法不会产生任何效果。
 *
 * <p> 此方法调用 {@link #implFlush implFlush} 方法来执行实际的刷新操作。 </p>
 *
 * @param  out
 *         输出 $otype$ 缓冲区
 *
 * @return  一个 coder 结果对象，可以是 {@link CoderResult#UNDERFLOW} 或
 *          {@link CoderResult#OVERFLOW}
 *
 * @throws  IllegalStateException
 *          如果当前 $coding$ 操作的上一步既不是调用 {@link #flush flush}
 *          方法，也不是调用带有 <tt>true</tt> 作为 <tt>endOfInput</tt>
 *          参数的三参数 {@link
 *          #$code$($Itype$Buffer,$Otype$Buffer,boolean) $code$} 方法
 */
public final CoderResult flush($Otype$Buffer out) {
    if (state == ST_END) {
        CoderResult cr = implFlush(out);
        if (cr.isUnderflow())
            state = ST_FLUSHED;
        return cr;
    }

    if (state != ST_FLUSHED)
        throwIllegalStateException(state, ST_FLUSHED);

    return CoderResult.UNDERFLOW; // 已经刷新
}

/**
 * 刷新此 $coder$。
 *
 * <p> 此方法的默认实现不执行任何操作，始终返回 {@link CoderResult#UNDERFLOW}。此方法应由可能需要在读取整个输入序列后将最终的 $otype$ 写入输出缓冲区的 $coder$ 覆盖。 </p>
 *
 * @param  out
 *         输出 $otype$ 缓冲区
 *
 * @return  一个 coder 结果对象，可以是 {@link CoderResult#UNDERFLOW} 或
 *          {@link CoderResult#OVERFLOW}
 */
protected CoderResult implFlush($Otype$Buffer out) {
    return CoderResult.UNDERFLOW;
}

/**
 * 重置此 $coder$，清除任何内部状态。
 *
 * <p> 此方法重置与字符集无关的状态，并调用 {@link #implReset() implReset} 方法以执行任何字符集特定的重置操作。 </p>
 *
 * @return  此 $coder$
 *
 */
public final Charset$Coder$ reset() {
    implReset();
    state = ST_RESET;
    return this;
}

/**
 * 重置此 $coder$，清除任何字符集特定的内部状态。
 *
 * <p> 此方法的默认实现不执行任何操作。此方法应由维护内部状态的 $coder$ 覆盖。 </p>
 */
protected void implReset() { }

/**
 * 将一个或多个 $itype$ 编码为一个或多个 $otype$。
 *
 * <p> 此方法封装了基本的 $coding$ 循环，尽可能多地编码 $itype$，直到它耗尽输入、输出缓冲区空间不足或遇到编码错误。此方法由 {@link #$code$ $code$} 方法调用，后者处理结果解释和错误恢复。
 *
 * <p> 从缓冲区的当前位置开始读取和写入。最多读取 {@link Buffer#remaining in.remaining()} 个 $itype$，最多写入 {@link Buffer#remaining out.remaining()}
 * 个 $otype$。缓冲区的位置将被推进以反映读取的 $itype$ 和写入的 $otype$，但其标记和限制不会被修改。
 *
 * <p> 此方法返回一个 {@link CoderResult} 对象来描述其终止原因，方式与 {@link #$code$ $code$}
 * 方法相同。此方法的大多数实现将通过返回适当的结果对象来处理编码错误，以便由 {@link #$code$ $code$} 方法解释。优化的实现可能会检查相关的错误操作并自行实现该操作。
 *
 * <p> 此方法的实现可以通过返回 {@link CoderResult#UNDERFLOW} 直到接收到足够的输入来进行任意的向前查看。 </p>
 *
 * @param  in
 *         输入 $itype$ 缓冲区
 *
 * @param  out
 *         输出 $otype$ 缓冲区
 *
 * @return  一个描述终止原因的 coder 结果对象
 */
protected abstract CoderResult $code$Loop($Itype$Buffer in,
                                          $Otype$Buffer out);

/**
 * 方便方法，将单个输入 $itype$ 缓冲区的剩余内容编码到新分配的 $otype$ 缓冲区中。
 *
 * <p> 此方法实现了一个完整的 <a href="#steps">$coding$
 * 操作</a>；也就是说，它重置此 $coder$，然后编码给定 $itype$ 缓冲区中的 $itype$，最后刷新此
 * $coder$。因此，如果 $coding$ 操作已经在进行中，则不应调用此方法。 </p>
 *
 * @param  in
 *         输入 $itype$ 缓冲区
 *
 * @return 一个新分配的 $otype$ 缓冲区，包含编码操作的结果。缓冲区的位置将为零，其限制将跟随最后一个写入的 $otype$。
 *
 * @throws  IllegalStateException
 *          如果 $coding$ 操作已经在进行中
 *
 * @throws  MalformedInputException
 *          如果从输入缓冲区当前位置开始的 $itype$ 序列 $notLegal$，且当前的不合法输入操作为 {@link CodingErrorAction#REPORT}
 *
 * @throws  UnmappableCharacterException
 *          如果从输入缓冲区当前位置开始的 $itype$ 序列不能映射到等效的 $otype$ 序列，且当前的不可映射字符操作为 {@link
 *          CodingErrorAction#REPORT}
 */
public final $Otype$Buffer $code$($Itype$Buffer in)
    throws CharacterCodingException
{
    int n = (int)(in.remaining() * average$ItypesPerOtype$());
    $Otype$Buffer out = $Otype$Buffer.allocate(n);


                    if ((n == 0) && (in.remaining() == 0))
            return out;
        reset();
        for (;;) {
            CoderResult cr = in.hasRemaining() ?
                $code$(in, out, true) : CoderResult.UNDERFLOW;
            if (cr.isUnderflow())
                cr = flush(out);

            if (cr.isUnderflow())
                break;
            if (cr.isOverflow()) {
                n = 2*n + 1;    // 确保进度；n 可能为 0！
                $Otype$Buffer o = $Otype$Buffer.allocate(n);
                out.flip();
                o.put(out);
                out = o;
                continue;
            }
            cr.throwException();
        }
        out.flip();
        return out;
    }

#if[decoder]

    /**
     * 告知此解码器是否实现了自动检测字符集。
     *
     * <p> 该方法的默认实现始终返回 <tt>false</tt>；自动检测字符集的解码器应覆盖此方法以返回 <tt>true</tt>。 </p>
     *
     * @return  如果且仅当此解码器实现了自动检测字符集时返回 <tt>true</tt>
     */
    public boolean isAutoDetecting() {
        return false;
    }

    /**
     * 告知此解码器是否已检测到字符集&nbsp;&nbsp;<i>(可选操作)</i>。
     *
     * <p> 如果此解码器实现了自动检测字符集，则在解码操作期间的某个时间点，此方法可能会开始返回 <tt>true</tt>，以指示在输入字节序列中检测到了特定字符集。一旦发生这种情况，可以调用 {@link #detectedCharset detectedCharset} 方法来检索检测到的字符集。
     *
     * <p> 该方法返回 <tt>false</tt> 并不意味着尚未解码任何字节。一些自动检测字符集的解码器能够在确定特定字符集之前解码部分或全部输入字节序列。
     *
     * <p> 该方法的默认实现始终抛出一个 {@link UnsupportedOperationException}；自动检测字符集的解码器应覆盖此方法，一旦确定输入字符集后返回 <tt>true</tt>。 </p>
     *
     * @return  如果且仅当此解码器检测到特定字符集时返回 <tt>true</tt>
     *
     * @throws  UnsupportedOperationException
     *          如果此解码器未实现自动检测字符集
     */
    public boolean isCharsetDetected() {
        throw new UnsupportedOperationException();
    }

    /**
     * 检索此解码器检测到的字符集&nbsp;&nbsp;<i>(可选操作)</i>。
     *
     * <p> 如果此解码器实现了自动检测字符集，则此方法在检测到字符集后返回实际字符集。从那时起，此方法在整个当前解码操作期间返回相同的值。如果尚未读取足够的输入字节以确定实际字符集，则此方法抛出一个 {@link IllegalStateException}。
     *
     * <p> 该方法的默认实现始终抛出一个 {@link UnsupportedOperationException}；自动检测字符集的解码器应覆盖此方法以返回适当的值。 </p>
     *
     * @return  由此自动检测解码器检测到的字符集，或如果尚未确定字符集则返回 <tt>null</tt>
     *
     * @throws  IllegalStateException
     *          如果读取的字节不足以确定字符集
     *
     * @throws  UnsupportedOperationException
     *          如果此解码器未实现自动检测字符集
     */
    public Charset detectedCharset() {
        throw new UnsupportedOperationException();
    }

#end[decoder]

#if[encoder]

    private boolean canEncode(CharBuffer cb) {
        if (state == ST_FLUSHED)
            reset();
        else if (state != ST_RESET)
            throwIllegalStateException(state, ST_CODING);
        CodingErrorAction ma = malformedInputAction();
        CodingErrorAction ua = unmappableCharacterAction();
        try {
            onMalformedInput(CodingErrorAction.REPORT);
            onUnmappableCharacter(CodingErrorAction.REPORT);
            encode(cb);
        } catch (CharacterCodingException x) {
            return false;
        } finally {
            onMalformedInput(ma);
            onUnmappableCharacter(ua);
            reset();
        }
        return true;
    }

    /**
     * 告知此编码器是否可以编码给定字符。
     *
     * <p> 如果给定字符是代理字符，则此方法返回 <tt>false</tt>；此类字符只有在作为高代理字符后跟低代理字符的对时才能被解释。可以使用 {@link #canEncode(java.lang.CharSequence)
     * canEncode(CharSequence)} 方法测试字符序列是否可以被编码。
     *
     * <p> 此方法可能会修改此编码器的状态；因此，如果编码操作已经在进行中，则不应调用此方法。
     *
     * <p> 该方法的默认实现效率不高；通常应覆盖此方法以提高性能。 </p>
     *
     * @param   c
     *          给定字符
     *
     * @return  如果且仅当此编码器可以编码给定字符时返回 <tt>true</tt>
     *
     * @throws  IllegalStateException
     *          如果编码操作已经在进行中
     */
    public boolean canEncode(char c) {
        CharBuffer cb = CharBuffer.allocate(1);
        cb.put(c);
        cb.flip();
        return canEncode(cb);
    }

    /**
     * 告知此编码器是否可以编码给定字符序列。
     *
     * <p> 如果此方法为特定字符序列返回 <tt>false</tt>，则可以通过执行完整的 <a href="#steps">编码操作</a> 获取更多关于为何该序列无法被编码的信息。
     *
     * <p> 此方法可能会修改此编码器的状态；因此，如果编码操作已经在进行中，则不应调用此方法。
     *
     * <p> 该方法的默认实现效率不高；通常应覆盖此方法以提高性能。 </p>
     *
     * @param   cs
     *          给定字符序列
     *
     * @return  如果且仅当此编码器可以编码给定字符而不抛出任何异常且不执行任何替换时返回 <tt>true</tt>
     *
     * @throws  IllegalStateException
     *          如果编码操作已经在进行中
     */
    public boolean canEncode(CharSequence cs) {
        CharBuffer cb;
        if (cs instanceof CharBuffer)
            cb = ((CharBuffer)cs).duplicate();
        else
            cb = CharBuffer.wrap(cs.toString());
        return canEncode(cb);
    }

#end[encoder]


    private void throwIllegalStateException(int from, int to) {
        throw new IllegalStateException("当前状态 = " + stateNames[from]
                                        + ", 新状态 = " + stateNames[to]);
    }

}
